version: '3.9'

services:
  app:
    container_name: tg_cipher_bot
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    volumes:
      - ./logs:/opt/app/logs
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - app_network

  scheduler:
    container_name: scheduler
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - POSTGRES_HOST=postgres_container
    volumes:
      - ./logs:/opt/app/logs
    command: make up-scheduler
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - app_network

  postgres:
    container_name: postgres_container
    image: postgres:14.5
    command:
      - "postgres"
      - "-c"
      - "max_connections=50"
      - "-c"
      - "shared_buffers=1GB"
      - "-c"
      - "effective_cache_size=4GB"
      - "-c"
      - "work_mem=16MB"
      - "-c"
      - "maintenance_work_mem=512MB"
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "temp_file_limit=10GB"
      - "-c"
      - "log_min_duration_statement=200ms"
      - "-c"
      - "idle_in_transaction_session_timeout=10s"
      - "-c"
      - "lock_timeout=1s"
      - "-c"
      - "statement_timeout=60s"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
      - "-c"
      - "pg_stat_statements.max=10000"
      - "-c"
      - "pg_stat_statements.track=all"
    environment:
      PGDATA: "/var/lib/postgresql/data/pgdata"
    env_file:
      - .env
    volumes:
      - ./db:/var/lib/postgresql/data
    ports:
      - "$POSTGRES_PORT:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G
    networks:
      - app_network

  loki:
    container_name: loki
    image: grafana/loki:2.7.3
    ports:
      - "3100:3100"
    volumes:
      - ./loki-config.yaml:/etc/loki/local-config.yaml
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - app_network

  promtail:
    container_name: promtail
    image: grafana/promtail:2.7.3
    volumes:
      - ./logs:/home/logs
      - ./promtail-config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    networks:
      - app_network

  grafana:
    container_name: grafana
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=false
    env_file:
      - .env
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
        - name: Loki
          type: loki
          access: proxy 
          orgId: 1
          url: http://loki:3100
          basicAuth: false
          isDefault: true
          version: 1
          editable: false
        EOF
        /run.sh
    image: grafana/grafana:9.4.3
    ports:
      - "3000:3000"
    networks:
      - app_network


networks:
  app_network:
    driver: bridge